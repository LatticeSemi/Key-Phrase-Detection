1. Training Environment Setup Using Docker
------------------------------------------
Please refer "installdocker.txt" to install docker based on operating system.
Please refer "cuda/README.txt" to use GPU 
To build docker image: (This will take around 30-40 minutes)
  For Linux:
  ----------
     - Open terminal
     - cd Key_Phrase_Detection
     - sudo docker build -t keyphrase_detection .
  For Windows:
  ------------
     - Open Docker Quickstart terminal
     - cd Key_Phrase_Detection
     - docker build -t keyphrase_detection .
	

2. Dataset format
-----------------
The dataset should be in the following format:
dataset_root_direcory
├── _background_noise_
│   ├── <noise_1>.wav
│   ├── ...
│   └── <noise_n>.wav
├── <Class-1-Name>
│   ├── <wav_file_1>.wav
│   ├── ...
│   └── <wav_file_n>.wav
├── ...    
│
└── <Class-n-Name>
    ├── <wav_file_1>.wav
    ├── ...
    └── <wav_file_n>.wav


3. Shared directory between docker container and host
-----------------------------------------------------
The shared folder should contain:
  1. dataset directory in above mentioned format
  2. train_logs directory to store training logs and final .pb file
  
4. Training
-----------
1. Run docker image and select the dataset path
Follow the main step 1 to build the docker image
	For Linux:
	----------
	  - $cd Key_Phrase_Detection
	  - $python input.py
		arguments:
		    - shared folder(mentioned in above step) 
		    - Docker image name(keyphrase_detection) that has been built.
	  - Docker shell will open from the script.
	For Windows:
	------------
	   - Open the Docker Quickstart terminal.
		- Make sure that Xlaunch is installed to use display in docker. If it is not installed, please refer "installdocker.txt"
           - $cd Key_Phrase_Detection
	   - $export DISPLAY=<Machine IP address>:0.0 #Same as mentioned in link: https://dev.to/darksmile92/run-gui-app-in-linux-docker-container-on-windows-host-4kde 
           - $docker run --rm -it -p 8888:8888 -p 6006:6006 -v <path to shared folder>:<path to shared folder> -e DISPLAY=$DISPLAY --net=host keyphrase_detection
	  
2. There are two ways one can trigger training:
    1. Using Jupyter notebook GUI
	- To use GUI based training run command prompted in the docker shell to lauch jupyter notebook
        - For linux, jupyter notebook will run at "http://localhost:8888" and tensorboard will run at "http://localhost:6006" in the host browser.
        - For windows, jupyter notebook will run at "http://192.168.99.100:8888" and tensorboard will run at "http://192.168.99.100:6006" in the host browser. 192.168.99.100 is docker-machine default ip. Use command "docker-machine ip default" to get it.
	- Token id should be given which is available in the jupyter notebook link.
	- Open train.ipynb file
	- After notebook is opened, click "Kernel-> Restart & Run All" option from menubar  to load the GUI
	- The final .pb is copied to shared_folder/train_logs to access it from host machine. After that it can be used in SensAI tool.

    2. Using Docker shell
    Open config.sh:
    - Update DATA_DIR with the path to root directory of speech commands dataset.
    - Update FILTER_TRAIN_KEYWORD with all available keywords in dataset.
    - Update TRAIN_KEYWORD with all keywords that need to be trained by model.
    - One can also configure additional parameters in train_filter.sh and train.sh if needed.
    - Training:
    	1. Filter training:
    		$./train_filter.sh
    	2. Keyword training:
    		For phase 2 training, update path of phase 1 checkpoint in 'train.sh' as below:
    		Make sure that below line refers to checkpoints generated by Phase 1 training.
    			TRAIN_OPT = “$TRAIN_OPT –set_prefilter=<path_to_traindir/tinyvgg_conv.ckpt-50000> --lock_prefilter”
    		$./train.sh
    - ./genpbtxt.sh        # genrates inference graph
    - $python genpb.py --ckpt_dir <train_logs_dir>
	- $tensorboard --logdir=<train_logs_dir>


4. Hint and troubleshotting:
----------------------------
 - If have access error during training, give permissions to the shared folder to resolve the issue.
